# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PCA_DRS_Spreadsheet_checks
                                 A QGIS plugin
 This plugin...
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-10-11
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Valerio Pinna (Pre-Construct Archaeology)
        email                : vpinna@pre-construct.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from PyQt5.QtWidgets import QComboBox, QApplication
from qgis.PyQt.QtWidgets import QAction,QMessageBox, QToolBar, QLabel
from qgis.core import *
from qgis.gui import QgsMapLayerComboBox
from qgis.utils import iface
import win32clipboard



# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pca_drs_spreadsheet_checks_dialog import PCA_DRS_Spreadsheet_checksDialog
from .pca_drs_spreadsheet_checks_missing_context_DRS_dialog import PCA_DRS_Spreadsheet_checks_missing_context_DRS 

import os.path


class PCA_DRS_Spreadsheet_checks:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'PCA_DRS_Spreadsheet_checks_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        self.toolbar = iface.mainWindow().findChild( QToolBar, u'PCA DRS Spreadsheet Checks')
        if not self.toolbar:
            self.toolbar = iface.addToolBar( u'PCA DRS Spreadsheet Checks' )
            self.toolbar.setObjectName( u'PCA DRS Spreadsheet Checks')
            self.toolbar.setToolTip("")
            # self.toolbar.setFixedWidth(500)
            # self.toolbar.setStyleSheet("QToolBar" "{"
                                     # "background-color: pink;"
                                     # "}")

        self.dlgtool1 = PCA_DRS_Spreadsheet_checks_missing_context_DRS()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&PCA DRS Spreadsheet Checks')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('PCA_DRS_Spreadsheet_checks', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        #Label
        self.label = QLabel(self.iface.mainWindow())
        self.label.setText("PCA DRS Checks  ")
        self.label.setStyleSheet("font-weight: bold; color: black");
        self.projComboAction0 = self.toolbar.addWidget(self.label)

        #DRS Tables QgsMapLayerComboBox
        self.projCombo2 = QgsMapLayerComboBox(self.iface.mainWindow())
        self.projCombo2.setFilters(QgsMapLayerProxyModel.NoGeometry )
        self.projCombo2.setFixedWidth(200)
        self.projCombo2.setStyleSheet("QComboBox"
                                     "{"
                                     "background-color: lightgrey;"
                                     "}")

        self.projCombo2Action = self.toolbar.addWidget(self.projCombo2)
        self.projCombo2.setToolTip("DRS Spreadsheet to checks")


        # icon for duplicated context
        icon_path = ':/plugins/pca_drs_spreadsheet_checks/icons/PCA_DRS_checks_dupl_context_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Check for duplicated context numbers on the DRS Spreadsheet'),
            callback=self.check_duplicates,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
        # icon for missing data on plan
        icon_path = ':/plugins/pca_drs_spreadsheet_checks/icons/PCA_DRS_checks_missing_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Check for DRS data without correspondence on the plan'),
            callback=self.check_missing_data_on_plan,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
        # icon for missing context numbers on DRS
        icon_path = ':/plugins/pca_drs_spreadsheet_checks/icons/PCA_DRS_checks_missing_context_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Generate a list of the missing context number on DRS'),
            callback=self.missing_context_on_DRS,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
       
    


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&PCA DRS Spreadsheet Checks'),
                action)
            self.iface.removeToolBarIcon(action)
            
    def open_show_attribute_table(self):
        

        layer = self.projCombo2.currentLayer()

        att_tab_name = 'QgsAttributeTableDialog/'+layer.name().replace(' ','_')
        status = 'close'
        for w in QApplication.instance().allWidgets():
            if att_tab_name in w.objectName():
                QApplication.instance().setActiveWindow(w)
                status = 'open'

        if status == 'close':
            iface.showAttributeTable(layer)

    def check_duplicates(self):
        layer = self.projCombo2.currentLayer()
        if layer is None:
                QMessageBox.about(None,'PCA DRS Checks', '''The project doesn't contain any valid DRS table.''')
                return self.dontdonothing()
        else: 
            e = ''' 
            count( "Context" , "Context" ) > 1
            '''
            layer.selectByExpression(e)
            return self.open_show_attribute_table()
        
    def check_missing_data_on_plan(self):
        layer = self.projCombo2.currentLayer()
        
        if layer is None:
                QMessageBox.about(None,'PCA DRS Checks', '''The project doesn't contain any valid DRS table.''')
                return self.dontdonothing()
        else: 
            e = ''' 
            Cut = 
            array_to_string(
            aggregate( 
            layer:='Interventions',
            aggregate:='array_agg',
            expression:="context_no",
            filter:=  "context_no" = 
            attribute(@parent,'Cut')
            )
            ) = 1
            '''
            layer.selectByExpression(e)
            layer.invertSelection()
            return self.open_show_attribute_table()
        
    def update_missing_context_list(self):
        min_context_no = self.dlgtool1.first_context_spinBox.value()
        max_context_no = self.dlgtool1.last_context_spinBox.value()
        numbers = []
        
        for u in range(min_context_no, (max_context_no+1)):
            numbers.append(u)

        layer = self.projCombo2.currentLayer()

        context_list = []
        for f in layer.getFeatures():
            context_list.append(int(f['Context']))

        missing_list = []
        for c in numbers:
            if c not in context_list:
                missing_list.append(c)
                
        print ('missing are: ', missing_list)
        missing_list_as_string = ', ' .join(str(e) for e in missing_list)
        
        self.dlgtool1.result_plainTextEdit.setPlainText(missing_list_as_string)
        
    def copy_to_clipboard(self):
         
        missing_list_final = self.dlgtool1.result_plainTextEdit.toPlainText()                
                            
        win32clipboard.OpenClipboard()
        win32clipboard.EmptyClipboard()
        win32clipboard.SetClipboardText(missing_list_final)
        win32clipboard.CloseClipboard()
        
    def missing_context_on_DRS(self):
        layer = self.projCombo2.currentLayer()
        if layer is None:
                QMessageBox.about(None,'PCA DRS Checks', '''The project doesn't contain any valid DRS table.''')
                return self.dontdonothing()
        else: 
            context_list = []
            for f in layer.getFeatures():           
                context_value = f['Context']
                if context_value == NULL:
                    context_to_add = 'EMPTY'
                if context_value != NULL:
                    context_to_add = context_value
                
                context_list.append(context_to_add)
            
                    
                
                if 'EMPTY' in context_list:
                    QMessageBox.warning(None,'PCA DRS Checks', 'The DRS table contains one o more empty Context Number values (e.g., NULL). Please fix this errors before re-run the tool.') 
                    
                    e = ''' 
                    "Context" is NULL
                    '''
                    layer.selectByExpression(e)
                    return self.open_show_attribute_table()
                    
                if 'EMPTY' not in context_list:
                    print(context_list)

                    min_context = int(min(context_list))
                    max_context = int(max(context_list))
                    
                    
                    
                    self.dlgtool1.first_context_spinBox.setValue(min_context)
                    self.dlgtool1.last_context_spinBox.setValue(max_context)
        
        
            # show the dialog
            self.dlgtool1.show()
            # Run the dialog event loop
            
            self.dlgtool1.check_missing_pushButton.clicked.connect(self.update_missing_context_list)
            
            self.dlgtool1.copy_clipboard_pushButton.clicked.connect(self.copy_to_clipboard)
            result = self.dlgtool1.exec_()
        # See if OK was pressed
        if result:
            return self.dontdonothing()
    
              
        
    
    
    
    
    
    def dontdonothing(self):
            pass
        
            
        